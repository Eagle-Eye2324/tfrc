16
{"last_modification_time":1550605148,"language":1,"import_file":"c:/users/administrator/desktop/willsmth/include/main.h","args_hash":7340411219607954768,"includes":[{"line":27,"resolved_path":"c:/users/administrator/desktop/willsmth/include/api.h"}],"dependencies":["c:/users/administrator/desktop/willsmth/include/api.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/stdlib.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/_ansi.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/newlib.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/config.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/features.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/reent.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/_types.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/_types.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/_default_types.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/lock.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/cdefs.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/alloca.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/stdint.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/_intsup.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/_stdint.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/ieeefp.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/_newlib_version.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/stdlib.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h"],"skipped_by_preprocessor":["31:1-33:7","108:1-110:7"],"types":[],"funcs":[{"id":0,"usr":9259272238308784346,"detailed_name":"void autonomous()","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nRuns the user autonomous code. This function will be started in its own task with the default\r\npriority and stack size whenever the robot is enabled via the Field Management System or the\r\nVEX Competition Switch in the autonomous mode. If the robot is disabled or communications is\r\nlost, the autonomous task will be stopped by the kernel. Re-enabling the robot will restart\r\nthe task, not re-start it from where it left off.\r\n\r\nCode running in the autonomous task cannot access information from the VEX Joystick. However,\r\nthe autonomous function can be invoked from another task if a VEX Competition Switch is not\r\navailable, and it can access joystick information if called in this way.\r\n\r\nThe autonomous task may exit, unlike operatorControl() which should never exit. If it does\r\nso, the robot will await a switch to another mode or disable/enable cycle.","declarations":[{"spell":"64:6-64:16|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":11829288557914536649,"detailed_name":"void initializeIO()","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nRuns pre-initialization code. This function will be started in kernel mode one time while the\r\nVEX Cortex is starting up. As the scheduler is still paused, most API functions will fail.\r\n\r\nThe purpose of this function is solely to set the default pin modes (pinMode()) and port\r\nstates (digitalWrite()) of limit switches, push buttons, and solenoids. It can also safely\r\nconfigure a UART port (usartOpen()) but cannot set up an LCD (lcdInit()).","declarations":[{"spell":"73:6-73:18|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":11349631069955763835,"detailed_name":"void initialize()","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nRuns user initialization code. This function will be started in its own task with the default\r\npriority and stack size once when the robot is starting up. It is possible that the VEXnet\r\ncommunication link may not be fully established at this time, so reading from the VEX\r\nJoystick may fail.\r\n\r\nThis function should initialize most sensors (gyro, encoders, ultrasonics), LCDs, global\r\nvariables, and IMEs.\r\n\r\nThis function must exit relatively promptly, or the operatorControl() and autonomous() tasks\r\nwill not start. An autonomous mode selection menu like the pre_auton() in other environments\r\ncan be implemented in this task if desired.","declarations":[{"spell":"87:6-87:16|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":250168000188101300,"detailed_name":"void operatorControl()","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nRuns the user operator control code. This function will be started in its own task with the\r\ndefault priority and stack size whenever the robot is enabled via the Field Management System\r\nor the VEX Competition Switch in the operator control mode. If the robot is disabled or\r\ncommunications is lost, the operator control task will be stopped by the kernel. Re-enabling\r\nthe robot will restart the task, not resume it from where it left off.\r\n\r\nIf no VEX Competition Switch or Field Management system is plugged in, the VEX Cortex will\r\nrun the operator control task. Be warned that this will also occur if the VEX Cortex is\r\ntethered directly to a computer via the USB A to A cable without any VEX Joystick attached.\r\n\r\nCode running in this task can take almost any action, as the VEX Joystick is available and\r\nthe scheduler is operational. However, proper use of delay() or taskDelayUntil() is highly\r\nrecommended to give other tasks (including system tasks such as updating LCDs) time to run.\r\n\r\nThis task should never exit; it should end with some kind of infinite loop, even if empty.","declarations":[{"spell":"105:6-105:21|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":11884207875585579076,"detailed_name":"MAIN_H_","short_name_offset":0,"short_name_size":7,"hover":"#define MAIN_H_","comments":"","declarations":[],"spell":"26:9-26:16|-1|1|2","extent":"26:9-26:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":1,"usr":7442915560299386488,"detailed_name":"RM_DRIVE_MOTOR","short_name_offset":0,"short_name_size":14,"hover":"#define RM_DRIVE_MOTOR 1","comments":"","declarations":[],"spell":"36:9-36:23|-1|1|2","extent":"36:9-36:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":2,"usr":3180056714716447052,"detailed_name":"RR_DRIVE_MOTOR","short_name_offset":0,"short_name_size":14,"hover":"#define RR_DRIVE_MOTOR 2","comments":"","declarations":[],"spell":"37:9-37:23|-1|1|2","extent":"37:9-37:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":9054002895244179795,"detailed_name":"LM_DRIVE_MOTOR","short_name_offset":0,"short_name_size":14,"hover":"#define LM_DRIVE_MOTOR 3","comments":"","declarations":[],"spell":"38:9-38:23|-1|1|2","extent":"38:9-38:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":15452248204914891715,"detailed_name":"LR_DRIVE_MOTOR","short_name_offset":0,"short_name_size":14,"hover":"#define LR_DRIVE_MOTOR 4","comments":"","declarations":[],"spell":"39:9-39:23|-1|1|2","extent":"39:9-39:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":14360678076746253981,"detailed_name":"IME_RM_DRIVE_MOTOR","short_name_offset":0,"short_name_size":18,"hover":"#define IME_RM_DRIVE_MOTOR 0","comments":"","declarations":[],"spell":"42:9-42:27|-1|1|2","extent":"42:9-42:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":6,"usr":14910588159842277909,"detailed_name":"IME_LM_DRIVE_MOTOR","short_name_offset":0,"short_name_size":18,"hover":"#define IME_LM_DRIVE_MOTOR 1","comments":"","declarations":[],"spell":"43:9-43:27|-1|1|2","extent":"43:9-43:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":4609442457780517287,"detailed_name":"NUMBER_OF_IME","short_name_offset":0,"short_name_size":13,"hover":"#define NUMBER_OF_IME 2","comments":"","declarations":[],"spell":"44:9-44:22|-1|1|2","extent":"44:9-44:24|-1|1|0","uses":[],"kind":255,"storage":0}]}